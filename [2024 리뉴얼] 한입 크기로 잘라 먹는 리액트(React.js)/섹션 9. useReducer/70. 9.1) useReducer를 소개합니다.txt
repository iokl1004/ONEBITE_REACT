70. 9.1) useReducer를 소개합니다

. useReducer?
1. 컴포넌트 내부에 새로운 State를 생성하는 React Hook
2. 모든 useState는 useReducer로 대체 가능!
3. 상태관리 코드를 컴포넌트 외부로 분리할 수 있음.

components/Exam.jsx 파일 생성!
App.jsx 수정

---
App.jsx

import './App.css'
import { useState, useRef } from 'react'
import Header from './components/Header'
import Editor from './components/Editor'
import List from './components/List'
import Exam from './components/Exam'

const mockData = [
  {
    id : 0,
    isDone : false,
    content : "React 공부하기",
    date : new Date().getTime(),
  },
  {
    id : 1,
    isDone : false,
    content : "영화 감상하기",
    date : new Date().getTime(),
  },
  {
    id : 2,
    isDone : false,
    content : "볼링",
    date : new Date().getTime(),
  },
];

function App() {

  const [todos, setTodos] = useState(mockData);
  const idRef = useRef(3);

  const onCreate = (content) => {
    const newTodo = {
      id : idRef.current++,
      isDone : false,
      content : content,
      date : new Date().getTime(),
    }

    // todos배열 추가
    // 아래와 같이 하면 절대 안됨... state의 값은 상태변화의 값을 적용시켜줘야함.
    // todos.push(newTodo)

    setTodos([newTodo, ...todos]);
  };

  // 아이템 수정
  const onUpdate = (targetId) => {
    // todos State의 값들 중에
    // targetId와 일치하는 id를 갖는 투두 아이템의 isDone 변경

    // 인수 : todos 배열에서 targetId와 잉ㄹ치하는 id를 갖는 요소의 데이터만 딱 바꾼 새로운 배열
    // todo의 id가 현재 타겟 id와 같다면 그때에는 기존의 투두 객체에 isdone의 프로퍼티만 변경을 하고
    // 같지 않을 경우 기존 투두의 값을 리턴해주면 된다!
    setTodos(todos.map((todo) =>
      todo.id === targetId
      ? { ...todo, isDone : !todo.isDone}
      : todo)
    );
  };

  // 아이템 삭제
  const onDelete = (targetId) => {
    // 인수 : todos 배열에서 targetId와 일치하는 id를 갖는 요소만 삭제한 새로운 배열
    setTodos(todos.filter((todo)=>todo.id !== targetId));
  };

  return (
   <div className="App">
      <Exam />
      {/* <Header />
      <Editor onCreate={onCreate} />
      <List todos={todos} onUpdate={onUpdate} onDelete={onDelete} /> */}
    </div>
  )
}

export default App;

---
Exam.jsx

import { useReducer } from "react";

// reducer : 변환기
// -> 상태를 실제로 변화 시키는 변환기 역할.
function reducer(state, action) {
    console.log(state, action);
    // if(action.type === 'INCREASE') {
    //     return state + action.data
    // }
    // else if (action.type === "DECREASE") {
    //     return state - action.data;
    // }

    // 위의 if문을 switch 문으로 변경하자면?!
    switch(action.type) {
        case 'INCREASE' :
            return state + action.data;
        case 'DECREASE' :
            return state - action.data;
        default :
            return state;
    }
}

const Exam = () => {
    // dispath : 발송하다, 급송하다
    // -> 상태 변화가 있어야 한다는 사실을 알리는, 발송하는 함수.
    const [state, dispatch] = useReducer(reducer, 0);

    const onClickPlus = () => {
        // 인수 : 상태가 어떻게 변화되길 원하는지
        // -> 인수로 전달된 요청의 내용을 담고 있는 객체를 액션 객체 라고 한다.
        dispatch({
            // 값을 증가 시켜달라!
            type : "INCREASE",

            // 얼만큼? 1만큼
            data : 1,
        });
    }

    const onClickMinus = () => {
        dispatch({
            type : "DECREASE",
            data : 1,
        })
    }

    return (
        <div>
            <h1>{state}</h1>
            <button onClick = {onClickPlus}>+</button>
            <button onClick = {onClickMinus}>-</button>
        </div>
    );
};

export default Exam;

