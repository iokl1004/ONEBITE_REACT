51. 5.7) State와 Props

리렌더링의 3조건
1. 자신이 자신이 관리하는 State값이 변경 되어있을때
2. 자신이 제공받는 Props의 값이 변경 되었을때
3. 부모 컴포넌트가 리렌더링이 이루어 지면, 자식 컴포넌트도 리렌더링이 진행된다.

아래 두개의 jsx 파일 생성
Bulb.jsx
Counter.jsx
---
App.jsx

import './App.css'
import { useState } from "react";
import Bulb from './components/Bulb';
import Counter from './components/Counter';

function App() {
  return (
    <>
      <Bulb/>
      <Counter />
    </>
  )
}

export default App;

---

Bulb.jsx

import { useState } from "react";

const Bulb = () => {
  
    // 리 렌더링을 위해 useState를 사용한다!
    const [light, setLight] = useState("OFF");
    console.log(light);
    
    return (
      <div>
        {light === 'ON' ? (
          <h1 style={{ backgroundColor : "orange" }}>ON</h1>
        ) : (
          <h1 style = {{ backgroundColor : "gray" }}>OFF</h1>
        )}
        <button onClick={() => {
          setLight(light === 'ON' ? "OFF" : "ON");
        }}
        >
          {light === "ON" ? "끄기" : "켜기" }
        </button>
      </div>
    );
  };

  export default Bulb;
---
Counter.jsx

import { useState } from "react";

const Counter = () => {
    const [count, setCount] = useState(0);
  
    return (
      <div>
      <h1>{count}</h1>
      <button onClick={() => {
        setCount(count + 1);
      }}
      >
        +
      </button>
    </div>
    )
  };

  export default Counter;
