50. 5.6) State로 상태관리하기
State란? 현재 가지고 있는 형태나 모양을 정의, 변화할 수 있는 동적의 값
예) 켜진 상태 전구를 끄면, 꺼진 상태의 전구가 되며, 다시 켜면 켜진 상태의 전구가 된다.

우리가 지금까지 만든 컴포넌트는 State가 없었으며, 앞으로 만들어볼 컴포넌트에는 State가 있다.
State의 값에 따라 렌더링 되는 UI가 결정된다.

하나의 컴포넌트 안에 여러개의 State를 가질수 있다.

isLightOn (state) -> 현재 전구의 점등상태 "ON", "OFF"
isBroken (state) -> 현재 전구의 고장 유무 true, false
isDirty(state) -> 현재 전구의 더러움 유무 true, false

---
App.jsx

import './App.css'
import { useState } from "react";

function App() {
  const [count, setCount] = useState(0);
  const [light, setLight] = useState("OFF");
  // 리 렌더링을 위해 useState를 사용한다!

  return (
    <>
    <div>
      <h1>{light}</h1>
      <button onClick={() => {
        setLight(light === 'ON' ? "OFF" : "ON");
      }}
      >
        {light === "ON" ? "끄기" : "켜기" }
      </button>
    </div>
    <div>
      <h1>{count}</h1>
      <button onClick={() => {
        setCount(count + 1);
      }}
      >
        +
      </button>
    </div>
    </>
  )
}

export default App;