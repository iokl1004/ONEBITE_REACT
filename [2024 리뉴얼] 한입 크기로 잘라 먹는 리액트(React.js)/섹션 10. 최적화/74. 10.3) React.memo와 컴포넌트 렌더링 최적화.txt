74. 10.3) React.memo와 컴포넌트 렌더링 최적화

React.memo
컴포넌트를 인수로 받아, 최적화된 컴포넌트로 만들어 반환

const MemoizedComponent = memo(Component)
반환값 : 최적화 된 컴포넌트, Props를 기준으로 메모이제이션 됨

App.jsx
TodoItem.jsx
Header.jsx
---

App.jsx

import './App.css'
import { useState, useRef, useReducer } from 'react'
import Header from './components/Header'
import Editor from './components/Editor'
import List from './components/List'
// import Exam from './components/Exam'

const mockData = [
  {
    id : 0,
    isDone : false,
    content : "React 공부하기",
    date : new Date().getTime(),
  },
  {
    id : 1,
    isDone : false,
    content : "영화 감상하기",
    date : new Date().getTime(),
  },
  {
    id : 2,
    isDone : false,
    content : "볼링",
    date : new Date().getTime(),
  },
];

function reducer(state, action) {
  switch(action.type) {
    case 'CREATE' : return [action.data, ...state]
    case 'UPDATE' : return state.map((item) => item.id === action.targetId? {...item, isDone: !item.isDone} : item);
    case 'DELETE' : return state.filter((item)=>item.id !== action.targetId)
    default : return state;
  }
}

function App() {

  // const [todos, setTodos] = useState(mockData);
  
  const [todos, dispatch] = useReducer(reducer, mockData);
  const idRef = useRef(3);

  const onCreate = (content) => {
    // const newTodo = {
      // id : idRef.current++,
      // isDone : false,
      // content : content,
      // date : new Date().getTime(),

      dispatch({
        type : "CREATE",
        data : {
          id : idRef.current++,
          isDone : false,
          content : content,
          date : new Date().getTime(),
        },
      });
    };

    // todos배열 추가
    // 아래와 같이 하면 절대 안됨... state의 값은 상태변화의 값을 적용시켜줘야함.
    // todos.push(newTodo)

  //   setTodos([newTodo, ...todos]);
  // };

  // 아이템 수정
  const onUpdate = (targetId) => {
    // todos State의 값들 중에
    // targetId와 일치하는 id를 갖는 투두 아이템의 isDone 변경

    // 인수 : todos 배열에서 targetId와 잉ㄹ치하는 id를 갖는 요소의 데이터만 딱 바꾼 새로운 배열
    // todo의 id가 현재 타겟 id와 같다면 그때에는 기존의 투두 객체에 isdone의 프로퍼티만 변경을 하고
    // 같지 않을 경우 기존 투두의 값을 리턴해주면 된다!
    // setTodos(todos.map((todo) =>
    //   todo.id === targetId
    //   ? { ...todo, isDone : !todo.isDone}
    //   : todo)
    // );

    dispatch({
      type: "UPDATE",
      targetId: targetId,
    });
  };

  // 아이템 삭제
  const onDelete = (targetId) => {
    // // 인수 : todos 배열에서 targetId와 일치하는 id를 갖는 요소만 삭제한 새로운 배열
    // setTodos(todos.filter((todo)=>todo.id !== targetId));

    dispatch({
      type : "DELETE",
      targetId : targetId,
    })
  };

  return (
   <div className="App">
      {/* <Exam /> */}
      <Header />
      <Editor onCreate={onCreate} />
      <List
        todos={todos}
        onUpdate={onUpdate}
        onDelete={onDelete} />
    </div>
  )
}

export default App;

---
TodoItem.jsx

import "./TodoItem.css";
import { memo } from 'react';

const TodoItem = ({
    id,
    isDone,
    content,
    date,
    onUpdate,
    onDelete
}) => {

    const onChangeCheckbox = () => {
        onUpdate(id);
    };

    const onClickDeleteButton = () => {
        onDelete(id);
    };

    return (
        <div className="TodoItem">
            <input
                // input요소이기에 onChange로 선언을 하였음.
                onChange={onChangeCheckbox}
                readOnly
                checked={isDone}
                type="checkbox" />
            <div className="content">{content}</div>
            <div className="date">
                {new Date(date).toLocaleDateString()}
            </div>
            <button onClick={onClickDeleteButton}>삭제</button>
        </div>
    );
};

// export default TodoItem;

// 고차 컴포넌트 (HOC)
export default memo(TodoItem, (prevProps, nextProps)=>{
    // 반환값에 따라, Props가 바뀌었는지 안바뀌었는지 판단
    // True -> Props 바뀌지 않음 -> 리렌더링 X
    // False -> Props 바뀜 -> 리렌더링 O

    if(prevProps.id !== nextProps.id) return false;
    if(prevProps.isDone !== nextProps.isDone) return false;
    if(prevProps.content !== nextProps.content) return false;
    if(prevProps.date !== nextProps.date) return false;

    return true;
});

---
Header.jsx

import "./Header.css";
import { memo } from "react";

const Header = () => {
    return (
        <div className="Header">
            <h3>오늘은 🚗</h3>
            <h1>{new Date().toDateString()}</h1>
        </div>
    );
};

// export default Header;
export default memo(Header);

