93. 12.15) Edit 페이지 구현하기

Edit.jsx 수정
Editor.jsx 수정

---
Edit.jsx

import { useParams, useNavigate } from "react-router-dom";
import Header from "../components/Header";
import Button from "../components/Button";
import Editor from "../components/Editor";
import { useEffect, useContext, useState } from "react";
import { DiaryDispatchContext, DiaryStateContext } from "../App";

const Edit = () => {
    const params = useParams();
    const nav = useNavigate();
    const { onDelete, onUpdate } = useContext(DiaryDispatchContext);
    const data = useContext(DiaryStateContext);
    const [curDiaryItem, setCurDiaryItem] = useState();

    useEffect(() => {
        const currentDiaryItem = data.find(
            (item) => String(item.id) === String(params.id)
        );

        // 존재하지 않는 다이어리 접속 시!
        if(!currentDiaryItem) {
            window.alert("존재 하지 않는 일기 입니다.")
            nav("/", {replace : true});
        }

        // 존재 하는 다이어리 인경우 
        setCurDiaryItem(currentDiaryItem);
    }, [params.id, data] ); // 컴포넌트가 마운트 된 이후 이거나, params의 id 혹은 데이터가 변경될 경우에만!

    const onClickDelete = () => {
        if (
        // 브라우저의 내장기능을 사용하는 함수 이며, 브라우저의 팝업을 보여주는 함수이다.
        // true : 확인버튼
        // false : 취소버튼
            window.confirm("일기를 정말 삭제 할까요? 다시 복구되지 않아요!")
        ) {
            // 일기 삭제 로직
            onDelete(params.id);
            // 홈페이지로 보내주면서, 뒤로가기 방지!
            nav('/', {replace : true});
        }
    };

    const onSubmit = (input) => {
        if(window.confirm("일기를 정말 수정 할까요?"))
        {
            onUpdate(
                params.id,
                input.createdDate.getTime(), // 타임 스탬프 형태로 저장
                input.emotionId,
                input.content,
            );
            nav("/", { replace : true});
        }
    }
    
    return (
        <div>
            <Header
                title={"일기 수정하기"}
                leftChild={
                    <Button
                        onClick={() => nav(-1)}
                        text={"< 뒤로가기"}
                    />}
                rightChild={
                    <Button
                        onClick={onClickDelete}
                        text={"삭제하기"}
                        type={"NEGATIVE"}
                    />}
            />
            <Editor onSubmit={onSubmit} initData={curDiaryItem}/>
        </div>
    )
}

export default Edit;

---
Editor.jsx

import "./Editor.css";
import EmotionItem from "./EmotionItem";
import Button from "./Button";
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const emotionList = [
    {
        emotionId : 1,
        emotionName : "완전 좋음"
    },
    {
        emotionId : 2,
        emotionName : "좋음"
    },
    {
        emotionId : 3,
        emotionName : "그럭저럭"
    },
    {
        emotionId : 4,
        emotionName : "나쁨"
    },
    {
        emotionId : 5,
        emotionName : "끔찍함"
    },
];

const getStringedDate = (targetDate) => {
    // 날짜 -> YYYY-MM-DD
    let year = targetDate.getFullYear();
    let month = targetDate.getMonth() + 1;
    let date = targetDate.getDate();

    if(month < 10){
        month = `0${month}`;
    }
    if(date < 10) {
        date = `0${date}`;
    }

    return `${year}-${month}-${date}`;
}

const Editor = ( { initData, onSubmit }) => {
    const [input, setInput] = useState({
        createdDate : new Date(),
        emotionId : 3,
        content : "",
    });

    const nav = useNavigate();

    useEffect(()=> {
        if(initData) {
            setInput({
                ...initData,
                createdDate : new Date(Number(initData.createdDate)),
            })
        }
    }, [initData])

    const onChangeInput = (e) => {
        let name = e.target.name;
        let value = e.target.value;

        if(name === 'createdDate') {
            value = new Date(value);
        }

        setInput({
            ...input,
            [name] : value,
        });
    };

    const onClickSubmitButton = () => {
        onSubmit(input);
    };

    return (
        <div className="Editor">
            <section className="date_section">
                <h4>오늘의 날짜</h4>
                <input
                    name = "createdDate"
                    onChange={onChangeInput}
                    value={getStringedDate(input.createdDate)}
                    type="date"
                />
            </section>
            <section className="emotion_section">
                <h4>오늘의 감정</h4>
                <div className="emotion_list_weapper">
                    {emotionList.map((item) => (
                        <EmotionItem
                            onClick={()=> onChangeInput({
                                target : {
                                    name : "emotionId",
                                    value : item.emotionId,
                                },                                
                            })
                            }
                            key={item.emotionId} {...item}
                            isSelected={item.emotionId === input.emotionId}
                        />
                    ))}
                </div>
            </section>
            <section className="content_section">
                <h4>오늘의 일기</h4>
                <textarea
                    name="content"
                    value={input.content}
                    onChange={onChangeInput}
                    placeholder="오늘은 어땠나요?"/>
            </section>
            <section className="button_section">
                <Button
                    onClick ={()=> nav(-1)}
                    text={"취소하기"} />
                <Button
                    onClick={onClickSubmitButton}
                    text={"작성완료"}
                    type={"POSITIVE"} />
            </section>
        </div>
    ) 
};

export default Editor;