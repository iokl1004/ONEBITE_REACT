88. 12.10) Home 페이지 구현하기 1. UI

Header 컴포넌트
DiaryList 컴포넌트
DiaryItem 컴포넌트

App.jsx 수정
Home.jsx 수정
src/components/DiaryList.jsx 추가
src/components/DiaryList.css 추가
src/components/DirayItem.jsx 추가
src/components/DiaryItem.css 추가

---
App.jsx

import './App.css'
// useNavigate : 페이지를 실제로 이동 시켜주는 네비게이트함수를 반환해줌
import { useReducer, useRef, createContext } from 'react';
import { Routes, Route, Link, useNavigate } from "react-router-dom";
import Home from './pages/Home';
import Diary from './pages/Diary';
import New from './pages/New';
import Edit from './pages/Edit';
import Notfound from './pages/Notfound';

import Button from './components/Button.jsx';
import Header from './components/Header.jsx';

import { getEmotionImage } from './util/get-emotion-image.js';

// 임시 일기 데이터 객체 모델링
const mockData = [
  {
    id : 1,
    createdDate : new Date().getTime(),
    emotionId : 1,
    content : "1번 일기 내용",
  },
  {
    id : 2,
    createdDate : new Date().getTime(),
    emotionId : 2,
    content : "2번 일기 내용",
  },
];

function reducer(state, action) {
  switch(action.type) {
    case "CREATE" :
      return [action.data, ...state]; // 원본데이터 복사
    case "UPDATE" :
      // item들 중에 item의 id값이 현재 action 개체의 데이터의 id와 일치하는 요소가 있다면
      // 해당 요소는 actiondata로 수정을 하고
      // 그렇지 않다면 item을 수정하지 않고 리턴한다!
      return state.map((item) =>
        String(item.id) === String(action.data.id)
          ? action.data
          : item
        );
    case "DELETE" :
      return state.filter((item)=> String(item.id) !== String(action.id));
    default :
      return state;
  }
}

// 일기 데이터를 공급할 컨테스트 추가
const DiaryStateContext = createContext();

// 일기를 수정하는 함수들도 함께 컨텍스트를 통하여 공급하도록 해보자!
const DiaryDispatchContext = createContext();


function App() {
  const [data, dispatch] = useReducer(reducer, mockData);
  // 앞으로 생성될 일기 ID
  const idRef = useRef(3);

  // 새로운 일기 추가
  const onCreate = (createdDate, emotionId, content) => {
    // 새로운 일기를 추가하는 기능
    dispatch({
      // 액션개체 추가
      type:"CREATE",
      data : {
        id : idRef.current++,
        createdDate,
        emotionId,
        content,
      },
    });
  };

  // 기존 일기 수정
  const onUpdate = (id, createdDate, emotionId, content) => {
    dispatch(
    {
      type : "UPDATE",
      data : {
        id,
        createdDate,
        emotionId,
        content,
      },
    });
  }

  // 기존 일기 삭제
  const onDelete = (id) => {
    dispatch ({
      type : "DELETE",
      id,
    })
  }

  return (
    <>
      <DiaryStateContext.Provider value={data} >
        <DiaryDispatchContext.Provider
          value={{
            onCreate,
            onUpdate,
            onDelete,
          }}
        >
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/new" element={<New />} />
            <Route path="/diary/:id" element={<Diary />} />
            <Route path="/edit/:id" element={<Edit />} />
            <Route path="*" element={<Notfound />} />        
          </Routes>
        </DiaryDispatchContext.Provider>
      </DiaryStateContext.Provider>
    </>
  )
}

export default App;

---
Home.jsx

import Header from "../components/Header";
import Button from "../components/Button";
import DiaryList from "../components/DiaryList";

const Home = () => {
    return (
        <div>
            <Header title={"2024년 7월"}
                leftChild={<Button text={"<"} />}
                rightChild={<Button text={">"} />}
            />
            <DiaryList />
        </div>
    );
};

export default Home;

---
src/components/DiaryList.jsx

import "./DiaryList.css";
import Button from "./Button";
import DiaryItem from './DirayItem';

const DiaryList = () => {
    return (
        <div className="DiaryList">
            {/* 메뉴바 */}
            <div className="menu_bar">
                <select>
                    <option value={"latest"}>최신순</option>
                    <option value={"oldest"}>오래된 순</option>
                </select>
                <Button text={"새 일기 쓰기"} type={"POSITIVE"} />
            </div>            
            {/* 다이어리 리스트 */}
            <div className="list_wrapper">
                <DiaryItem />
            </div>
        </div>
    )
}

export default DiaryList;

---
src/components/DiaryList.css

.DiaryList .menu_bar {
    /* 위아래 20px, 좌우 0px */
    margin : 20px 0px;
    display : flex;
    gap : 10px;
}

.DiaryList .menu_bar select {
    background-color: rgb(236, 236, 236);
    border: none;
    border-radius: 5px;

    padding : 10px 20px;
    font-size : 18px;
    cursor : pointer;
}

.DiaryList .menu_bar button {
    flex: 1;
}

---
src/components/DirayItem.jsx

import { getEmotionImage } from "../util/get-emotion-image";
import Button from "./Button";
import './DiaryItem.css';

const DiaryItem = () => {
    // 감정 번호
    const emotionId = 1;

    return (
        <div className = "DiaryItem">
            <div className = {`img_section img_section_${emotionId}`}> 
                <img src={getEmotionImage(emotionId)} />
            </div>
            <div className = "info_section">
                <div className="created_date">
                    {new Date().toLocaleDateString()}
                </div>
                <div className="content">
                    일기컨텐츠
                </div>
            </div>
            <div className = "button_section">
                <Button text={"수정하기"} />
            </div>
        </div>
    )
};

export default DiaryItem;

---
src/components/DiaryItem.css

.DiaryItem {
    display: flex;
    gap : 15px;
    /* 최대한 간겨을 벌려서 떨어지게 */
    justify-content: space-between;

    padding : 15px 0px;
    border-bottom: 1px solid rgb(236, 236, 236);
}

.DiaryItem .img_section {
    min-width: 120px;
    height: 80px;

    display: flex;
    justify-content: center;
    cursor: pointer;

    border-radius: 5px;
}

.DiaryItem .img_section > img {
    width: 50%;
}

.DiaryItem .img_section_1 {
    background-color: rgb(100, 201, 100);
}

.DiaryItem .img_section_2 {
    background-color: rgb(157, 215, 114);
}

.DiaryItem .img_section_3 {
    background-color: rgb(253, 206, 23);
}

.DiaryItem .img_section_4 {
    background-color: rgb(253, 132, 70);
}

.DiaryItem .img_section_5 {
    background-color: rgb(253, 86, 95);
}

.DiaryItem .info_section {
    flex : 1;
    cursor : pointer;
}

.DiaryItem .info_section .created_date {
    font-weight : bold;
    font-size : 25px;
}

.DiaryItem .info_section .content {
    font-size : 18px;
}

.DiaryItem .button_section {
    min-width: 70px;
}