89. 12.11) Home 페이지 구현하기 2. 기능

헤더의 양쪽 버튼을 클릭하여 이전달과 다음달로 이동해보자!

Header.jsx 수정
Home.jsx 수정
App.jsx 수정
DiaryList.jsx 수정
DirayItem.jsx 수정

---
Header.jsx

import "./Header.css";

const Header = ({ title, leftChild, rightChild }) => {
    return (
        <header className="Header">
            <div className="header_left">{leftChild}</div>
            <div className="header_center">{title}</div>
            <div className="header_right">{rightChild}</div>
        </header>
    );
};

export default Header;

---
Home.jsx

import { useState, useContext } from "react";
import { DiaryStateContext } from "../App";

import Header from "../components/Header";
import Button from "../components/Button";
import DiaryList from "../components/DiaryList";

const getMonthlyData = (pivotDate, data) => {

    // 이번달의 가장 첫번째 시간
    const beginTime = new Date(
        pivotDate.getFullYear(),
        pivotDate.getMonth(),
        1,
        0,
        0,
        0
    ).getTime();

    // 이번달의 가장 마지막 시간
    const endTime = new Date(
        pivotDate.getFullYear(),
        pivotDate.getMonth() + 1,
        0,
        23,
        59,
        59,
    ).getTime();

    // 이번달에 해당하는 데이터만 추출
    return data.filter(
        (item) =>
            beginTime <= item.createdDate && item.createdDate <= endTime
    );
}

const Home = () => {
    const data = useContext(DiaryStateContext);
    const [pivotDate, setPrivotDate] = useState(new Date());

    const monthlyData = getMonthlyData(pivotDate, data);

    const onIncreaseMonth = () => {
        setPrivotDate(
            new Date(pivotDate.getFullYear(), pivotDate.getMonth() + 1)
        );
    };

    const onDecreaseMonth = () => {
        setPrivotDate(
            new Date(pivotDate.getFullYear(), pivotDate.getMonth() - 1)
        );
    };

    return (
        <div>
            <Header title={`${pivotDate.getFullYear()}년 ${pivotDate.getMonth() + 1}월`}
                leftChild={<Button text={"<"} onClick={onDecreaseMonth} />}
                rightChild={<Button text={">"} onClick={onIncreaseMonth} />}
            />
            <DiaryList data={monthlyData} />
        </div>
    );
};

export default Home;

---
App.jsx

import './App.css'
// useNavigate : 페이지를 실제로 이동 시켜주는 네비게이트함수를 반환해줌
import { useReducer, useRef, createContext } from 'react';
import { Routes, Route, Link, useNavigate } from "react-router-dom";
import Home from './pages/Home';
import Diary from './pages/Diary';
import New from './pages/New';
import Edit from './pages/Edit';
import Notfound from './pages/Notfound';

import Button from './components/Button.jsx';
import Header from './components/Header.jsx';

import { getEmotionImage } from './util/get-emotion-image.js';

// 임시 일기 데이터 객체 모델링
const mockData = [
  {
    id : 1,
    createdDate : new Date("2024-07-10").getTime(),
    emotionId : 1,
    content : "1번 일기 내용",
  },
  {
    id : 2,
    createdDate : new Date("2024-07-09").getTime(),
    emotionId : 2,
    content : "2번 일기 내용",
  },
  {
    id : 3,
    createdDate : new Date("2024-06-01").getTime(),
    emotionId : 3,
    content : "3번 일기 내용",
  },
];

function reducer(state, action) {
  switch(action.type) {
    case "CREATE" :
      return [action.data, ...state]; // 원본데이터 복사
    case "UPDATE" :
      // item들 중에 item의 id값이 현재 action 개체의 데이터의 id와 일치하는 요소가 있다면
      // 해당 요소는 actiondata로 수정을 하고
      // 그렇지 않다면 item을 수정하지 않고 리턴한다!
      return state.map((item) =>
        String(item.id) === String(action.data.id)
          ? action.data
          : item
        );
    case "DELETE" :
      return state.filter((item)=> String(item.id) !== String(action.id));
    default :
      return state;
  }
}

// 일기 데이터를 공급할 컨테스트 추가
export const DiaryStateContext = createContext();

// 일기를 수정하는 함수들도 함께 컨텍스트를 통하여 공급하도록 해보자!
export const DiaryDispatchContext = createContext();


function App() {
  const [data, dispatch] = useReducer(reducer, mockData);
  // 앞으로 생성될 일기 ID
  const idRef = useRef(3);

  // 새로운 일기 추가
  const onCreate = (createdDate, emotionId, content) => {
    // 새로운 일기를 추가하는 기능
    dispatch({
      // 액션개체 추가
      type:"CREATE",
      data : {
        id : idRef.current++,
        createdDate,
        emotionId,
        content,
      },
    });
  };

  // 기존 일기 수정
  const onUpdate = (id, createdDate, emotionId, content) => {
    dispatch(
    {
      type : "UPDATE",
      data : {
        id,
        createdDate,
        emotionId,
        content,
      },
    });
  }

  // 기존 일기 삭제
  const onDelete = (id) => {
    dispatch ({
      type : "DELETE",
      id,
    })
  }

  return (
    <>
      <DiaryStateContext.Provider value={data} >
        <DiaryDispatchContext.Provider
          value={{
            onCreate,
            onUpdate,
            onDelete,
          }}
        >
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/new" element={<New />} />
            <Route path="/diary/:id" element={<Diary />} />
            <Route path="/edit/:id" element={<Edit />} />
            <Route path="*" element={<Notfound />} />        
          </Routes>
        </DiaryDispatchContext.Provider>
      </DiaryStateContext.Provider>
    </>
  )
}

export default App;

---
DiaryList.jsx

import "./DiaryList.css";
import Button from "./Button";
import DiaryItem from './DirayItem';
import { useNavigate } from "react-router-dom";
import { useState } from "react";

const DiaryList = ({ data }) => {
    const nav = useNavigate();
    const [sortType, setSortType] = useState("latest");

    const onChangeSortType = (e) => {
        setSortType(e.target.value);
    };

    const getSortedData = () => {
        // 정렬된 새로운 배열을 반환함.
        return data.toSorted((a, b) => {
            // 오래된 일기인 경우 나중으로 배치!
            if(sortType === 'oldest') {
                return Number(a.createdDate) - Number(b.createdDate);
            } else {
                return Number(b.createdDate) - Number(a.createdDate);
            }
        });
    };

    const sortedData = getSortedData();

    return (
        <div className="DiaryList">
            {/* 메뉴바 */}
            <div className="menu_bar">
                <select onChange={onChangeSortType}>
                    <option value={"latest"}>최신순</option>
                    <option value={"oldest"}>오래된 순</option>
                </select>
                <Button
                    onClick={() => nav("/new")}
                    text={"새 일기 쓰기"}
                    type={"POSITIVE"}
                />
            </div>            
            {/* 다이어리 리스트 */}
            <div className="list_wrapper">
                {sortedData.map((item) => (
                    <DiaryItem key={item.id} {...item}/>
                ))}                
            </div>
        </div>
    );
};

export default DiaryList;

---
DirayItem.jsx

import { getEmotionImage } from "../util/get-emotion-image";
import Button from "./Button";
import './DiaryItem.css';
import { useNavigate } from "react-router-dom";

const DiaryItem = ({id, emotionId, createdDate, content}) => {
    const nav = useNavigate();

    return (
        <div className = "DiaryItem">
            <div 
                onClick = {() => nav(`/diary/${id}`)}
                className = {`img_section img_section_${emotionId}`}> 
                <img src={getEmotionImage(emotionId)} />
            </div>
            <div
                onClick = {() => nav(`/diary/${id}`)}
                className = "info_section">
                <div className="created_date">
                    {new Date(createdDate).toLocaleDateString()}
                </div>
                <div className="content">
                    {content}
                </div>
            </div>
            <div className = "button_section">
                <Button 
                    onClick = {() => nav(`/edit/${id}`)}
                    text={"수정하기"} />
            </div>
        </div>
    )
};

export default DiaryItem;