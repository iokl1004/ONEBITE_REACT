85. 12.7) 공통 컴포넌트 구현하기
프로젝트 개발 순서는 사람마다 다름
근데 해당 강의하시는 이정환 강사님은 공통 컴포넌트를 먼저 구현을 함.

페이지 라우팅, 글로벌 레이아웃 설정,
공통 컴포넌트 구현,
개별 페이지 및 복잡한 기능 구현

Button 컴포넌트와 Header 컴포넌트를 먼저 구현!

App.jsx 수정
src/components/Button.jsx 추가!
src/components/Button.css 추가!
src/components/Header.css 추가!
src/components/Header.js 추가!
index.css 수정

---
App.jsx

import './App.css'
// useNavigate : 페이지를 실제로 이동 시켜주는 네비게이트함수를 반환해줌
import { Routes, Route, Link, useNavigate } from "react-router-dom";
import Home from './pages/Home'
import Diary from './pages/Diary'
import New from './pages/New'
import Notfound from './pages/Notfound';
import Button from './components/Button.jsx';
import Header from './components/Header.jsx';

// 소수의 이미지 같은 경우에는 src/assets 폴더에 적용을 하고, 다수의 이미지 같은 경우에는 public 모드에 적용을 하는것이 좋다!
// src/assets 폴더 적용
// 이미지를 불러오는 별도의 js파일로 빼내기 위해 src/util/get-emotion-image 파일에 복사!
// import emotion1 from './assets/emotion1.png';
// import emotion2 from './assets/emotion2.png';
// import emotion3 from './assets/emotion3.png';
// import emotion4 from './assets/emotion4.png';
// import emotion5 from './assets/emotion5.png';
import { getEmotionImage } from './util/get-emotion-image.js';

// 1. "/" : 모든 일기를 조회하는 Home 페이지
// 2. "/new" : 새로운 일기를 작성하는 new 페이지
// 3. "/diary" : 일기를 상세히 조회하는 Diary 페이지
function App() {
  const nav = useNavigate();

  // new 페이지로 이동을 한다!
  const onClickButton = () => {
    nav("/new");
  }

  return (
    <>
      {/* public 폴더에 해당 이미지를 넣고 이렇게 가동해도됨! 허나, 비트가 내부적으로 진행하는 이미지 최적화는 진행되지 않음. */}
      {/* <div>
        <img src={"/emotion1.png"} />
        <img src={"/emotion2.png"} />
        <img src={"/emotion3.png"} />
        <img src={"/emotion4.png"} />
        <img src={"/emotion5.png"} />
      </div> */}
      {/* <div>
        <img src={getEmotionImage(1)} />
        <img src={getEmotionImage(2)} />
        <img src={getEmotionImage(3)} />
        <img src={getEmotionImage(4)} />
        <img src={getEmotionImage(5)} />
      </div> */}
      {/* <div> */}
        {/* 링크방식 */}
        {/* <Link to={"/"}>Home</Link>
        <Link to={"/new"}>New</Link>
        <Link to={"/diary"}>Diary</Link> */}

        {/* 버튼 방식 */}
        {/* <button onClick={onClickButton}>New 페이지로 이동</button> */}

        {/* 기존 HTML 태그 방식         */}
        {/* <a href="/">Home</a>
        <a href="/new">New</a>
        <a href="/diary">Diary</a> */}
      {/* </div> */}
      {/* Routes 컴포넌트 안에는 라우트만 들어갈수 있음! */}

      <Header title={"Header"}
        leftChild={<Button text={"Left"} />}
        rightChild={<Button text={"Right"} />}
      />
      <Button
        text = {"123"}
        // 주석해도됨!
        // type = {"DEFAULT"}
        onClick = {() => {
          console.log("123번 버튼 클릭!");
        }}
      />

      {/* 긍정적 버튼 */}
      <Button
        text = {"123"}
        type = {"POSITIVE"}
        onClick = {() => {
          console.log("123번 버튼 클릭!");
        }}
      />

      {/* 부정적 버튼 */}
      <Button
        text = {"123"}
        type = {"NEGATIVE"}
        onClick = {() => {
          console.log("123번 버튼 클릭!");
        }}
      />
      
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/new" element={<New />} />
        {/* 1. URL Parameter 방식 : id는 URL 파라미터 값이다! */}
        <Route path="/diary/:id" element={<Diary />} />

        {/* 위의 있는 경로가 아니라면 낫파운드 화면출력! */}
        <Route path="*" element={<Notfound />} />
        
      </Routes>
    </>
  )
}

export default App;
---
src/components/Button.jsx

import "./Button.css";

const Button = ({text, type, onClick}) => {
    return (
        <div>
            <button
                onClick={onClick}
                className={`Button Button_${type}`}
            >
                {text}
            </button>
        </div>
    )
}

export default Button;
---
src/components/Button.css

.Button {
    background-color: rgb(236, 236, 236);
    cursor: pointer;
    /* 버튼 테두리 제거 */
    border: none;
    border-radius: 5px;
    padding : 10px 20px;
    font-size: 18px;
    /* 버튼 안에 들어있는 텍스트를 화면이 줄어들어도 줄바꿈이 되지 않게끔해준다! */
    white-space: nowrap;
}

/* 긍정적 */
.Button_POSITIVE {
    background-color: rgb(100, 201, 100);
    color : white;
}

/* 부정적 */
.Button_NEGATIVE {
    background-color: rgb(253, 86, 95);
    color : white;
}
---
src/components/Header.css

.Header {
    /* 가로방향 배치 */
    display : flex;
    /* 가운데로 위치하게끔 */
    align-items: center;

    /* 상하 20px 좌우 0px */
    padding : 20px 0px;

    /* 아랫방향 테두리 설정 */
    border-bottom: 1px solid rgb(226, 226, 226);
}

.Header > div {
    display: flex;
}

.Header .header_center {
    width : 50%;
    font-size: 25px;
    justify-content: center;
}

.Header .header_left {
    width: 25%;
    /* 왼쪽에 딱 붙게 한다! */
    justify-content: flex-start;
}

.Header .header_right {
    width: 25%;
    /* 오른쪽에 딱 붙게 한다!   */
    justify-content: flex-end;
}
---
src/components/Header.jsx

import "./Header.css";

const Header = ({ title, leftChild, rightChild }) => {
    return (
        <header className="Header">
            <div className="header_left">{leftChild}</div>
            <div className="header_center">{title}</div>
            <div className="header_right">{rightChild}</div>
        </header>
    );
};

export default Header;
---
index.css

@font-face {
    font-family : "NanumPenScript";
    src: url("NanumPenScript-Regular.ttf");
}
html, body {
    margin : 0px;
    width : 100%;
    background-color: rgb(246, 246, 246);
}

#root {
    background-color: white;
    /* 최대 넓이 600px */
    max-width: 600px;
    width: 100%;
    /* 가운데 설정 */
    margin : 0 auto;
    /* 최소높이 설정 Vue Port Height*/
    min-height: 100vh;
    height: 100%;
    box-shadow: rgba(100, 100, 100, 0.2) 0px 0px 29px 0px;
    /* 내부여백 설정  */
    padding : 0px 20px;
}

body * {
    font-family: "NanumPenScript";
}