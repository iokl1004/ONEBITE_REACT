87. 12.9) 일기 관리 기능 구현하기 2

App.jsx 수정

---
App.jsx

import './App.css'
// useNavigate : 페이지를 실제로 이동 시켜주는 네비게이트함수를 반환해줌
import { useReducer, useRef, createContext } from 'react';
import { Routes, Route, Link, useNavigate } from "react-router-dom";
import Home from './pages/Home';
import Diary from './pages/Diary';
import New from './pages/New';
import Edit from './pages/Edit';
import Notfound from './pages/Notfound';

import Button from './components/Button.jsx';
import Header from './components/Header.jsx';

import { getEmotionImage } from './util/get-emotion-image.js';

// 임시 일기 데이터 객체 모델링
const mockData = [
  {
    id : 1,
    createdDate : new Date().getTime(),
    emotionId : 1,
    content : "1번 일기 내용",
  },
  {
    id : 2,
    createdDate : new Date().getTime(),
    emotionId : 2,
    content : "2번 일기 내용",
  },
];

function reducer(state, action) {
  switch(action.type) {
    case "CREATE" :
      return [action.data, ...state]; // 원본데이터 복사
    case "UPDATE" :
      // item들 중에 item의 id값이 현재 action 개체의 데이터의 id와 일치하는 요소가 있다면
      // 해당 요소는 actiondata로 수정을 하고
      // 그렇지 않다면 item을 수정하지 않고 리턴한다!
      return state.map((item) =>
        String(item.id) === String(action.data.id)
          ? action.data
          : item
        );
    case "DELETE" :
      return state.filter((item)=> String(item.id) !== String(action.id));
    default :
      return state;
  }
}

// 일기 데이터를 공급할 컨테스트 추가
const DiaryStateContext = createContext();

// 일기를 수정하는 함수들도 함께 컨텍스트를 통하여 공급하도록 해보자!
const DiaryDispatchContext = createContext();


function App() {
  const [data, dispatch] = useReducer(reducer, mockData);
  // 앞으로 생성될 일기 ID
  const idRef = useRef(3);

  // 새로운 일기 추가
  const onCreate = (createdDate, emotionId, content) => {
    // 새로운 일기를 추가하는 기능
    dispatch({
      // 액션개체 추가
      type:"CREATE",
      data : {
        id : idRef.current++,
        createdDate,
        emotionId,
        content,
      },
    });
  };

  // 기존 일기 수정
  const onUpdate = (id, createdDate, emotionId, content) => {
    dispatch(
    {
      type : "UPDATE",
      data : {
        id,
        createdDate,
        emotionId,
        content,
      },
    });
  }

  // 기존 일기 삭제
  const onDelete = (id) => {
    dispatch ({
      type : "DELETE",
      id,
    })
  }

  return (
    <>
      <button onClick={() => {
        onCreate(new Date().getTime(), 1, "Hello");
      }}
      >
        일기 추가 테스트
      </button>

      <button onClick={() => {
        onUpdate(1, new Date().getTime(), 3, "수정된 일기입니다.");
      }}
      >
        일기 수정 테스트
      </button>

      <button onClick={() => {
        onDelete(1);
      }}
      >
        일기 삭제 테스트
      </button>

      <DiaryStateContext.Provider value={data} >
        <DiaryDispatchContext.Provider
          value={{
            onCreate,
            onUpdate,
            onDelete,
          }}
        >
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/new" element={<New />} />
            <Route path="/diary/:id" element={<Diary />} />
            <Route path="/edit/:id" element={<Edit />} />
            <Route path="*" element={<Notfound />} />        
          </Routes>
        </DiaryDispatchContext.Provider>
      </DiaryStateContext.Provider>
    </>
  )
}

export default App;